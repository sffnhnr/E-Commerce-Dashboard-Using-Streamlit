# -*- coding: utf-8 -*-
"""ProjekAnalisisData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IG0QAocuSvo3eJh9U1B84wmmrPLMBhbH

# Proyek Analisis Data: [Input Nama Dataset]

---


- **Nama:** Saffanah Nur Fadilla
- **Email:** saffanahnurfadilla@gmail.com
- **ID Dicoding:** sffnhnr

## **Menentukan Pertanyaan Bisnis**

1. Pesebaran customer ditiap kota
   total produk
2. Produk apa yang paling tinggi dan rendah yang terjual di E-commerce?
3. Rating pelayanan E-commerce dari customer
4. Performa penjualan seiring waktu

## **Import Semua Packages/Library yang Digunakan**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.image as mpimg
import textwrap



"""## **Data Wrangling**

## **Gathering Data**

### Tabel data df_customer
"""

df_customer = pd.read_csv('customers_dataset.csv')
df_customer.head()

"""### Tabel data df_geolocation"""

df_geolocation = pd.read_csv('geolocation_dataset.csv')
df_geolocation.head()

"""### Tabel data df_orderitem"""

df_orderitems = pd.read_csv('order_items_dataset.csv')
df_orderitems.head()

"""### Tabel data df_payment"""

df_payment = pd.read_csv('order_payments_dataset.csv')
df_payment.head()

"""### Tabel data df_reviews"""

df_reviews = pd.read_csv('order_reviews_dataset.csv')
df_reviews.head()

"""### Tabel data df_orders"""

df_orders = pd.read_csv('orders_dataset.csv')
df_orders.head()

"""### Tabel data df_product_category"""

df_product_category = pd.read_csv('product_category_name_translation.csv')
df_product_category.head()

"""### Tabel data df_products"""

df_products = pd.read_csv('products_dataset.csv')
df_products.head()

"""### Tabel data df_sellers"""

df_sellers = pd.read_csv('sellers_dataset.csv')
df_sellers.head()

"""## **Assesing Data**

####-  Data df_customer
"""

df_customer.info()

df_customer.isna().sum()

print("Jumlah duplikasi: ", df_customer.duplicated().sum())

df_customer.describe(include=('all'))

"""####-  Data df_geolocation"""

df_geolocation.info()

df_geolocation.isna().sum()

print("Jumlah duplikasi: ", df_geolocation.duplicated().sum())

df_geolocation.describe(include=('all'))

"""####-  Data df_order_item"""

df_orderitems.info()

df_orderitems.isna().sum()

print("Jumlah dumplikasi : ", df_orderitems.duplicated().sum())

df_orderitems.describe(include=('all'))

"""####-  Data df_payment"""

df_payment.info()

df_payment.isna().sum()

print("Jumlah duplikasi : ", df_payment.duplicated().sum())

df_payment.describe(include=('all'))

"""####-  Data df_review"""

df_reviews.info()

df_reviews.isna().sum()

print("Jumlah duplikasi: ", df_reviews.duplicated().sum())

df_reviews.describe(include=('all'))

"""####-  Data df_orders"""

df_orders.info()

df_orders.isna().sum()

print("Jumlah duplikasi : ", df_orders.duplicated().sum())

df_orders.describe(include=('all'))

"""####-  Data df_product_category"""

df_product_category.info()

df_product_category.isna().sum()

print("Jumlah duplikasi : ", df_product_category.duplicated().sum())

df_product_category.describe(include=('all'))

"""####-  Data df_products"""

df_products.info()

df_products.isna().sum()

print("Jumlah duplikasi : ", df_products.duplicated().sum())

df_products.describe(include=('all'))

"""####-  Data df_sellers"""

df_sellers.info()

df_sellers.isna().sum()

print("Jumlah duplikasi : ", df_sellers.duplicated().sum())

df_sellers.describe(include=('all'))

"""####-  Data df_customer

## **Cleaning Data**

**Missing Value**
Memperbaiki missing value order_reviews pada kolom review_comment_title dan review_comment_message
"""

df_reviews[df_reviews.review_comment_title.isna()]

df_reviews.review_comment_title.value_counts()

df_reviews[df_reviews.review_comment_message.isna()]

df_reviews.review_comment_message.value_counts()

df_reviews.fillna(value="sem comentários", inplace=True)

#Mengisi missing value pada kolom review_comment_title
#dan review_comment_message dengan value "sem comentários" dengan arti "no comment"

df_reviews.isna().sum()

"""## **Tipe Data**"""

# mengubah tipe data
datetime_oi = ["shipping_limit_date"]

for column in datetime_oi:
  df_orderitems[column] = pd.to_datetime(df_orderitems[column])

df_orderitems.info()

datetime_or = ["review_creation_date","review_answer_timestamp"]

for column in datetime_or:
  df_reviews[column] = pd.to_datetime(df_reviews[column])

df_reviews.info()

datetime_oo = ["order_approved_at","order_purchase_timestamp","order_delivered_carrier_date","order_delivered_customer_date","order_purchase_timestamp","order_estimated_delivery_date"]

for column in datetime_oo:
  df_orders[column] = pd.to_datetime(df_orders[column])

df_orders.info()

df_sellers.info()

import pandas as pd

# Misalkan df1, df2, df3 adalah beberapa DataFrame yang ingin digabungkan
# Anda dapat mengganti df1, df2, df3 dengan DataFrame yang sebenarnya
df_customer = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
df_geolocation = pd.DataFrame({'A': [7, 8, 9], 'B': [10, 11, 12]})
df_orderitems = pd.DataFrame({'A': [13, 14, 15], 'B': [16, 17, 18]})
df_payment = pd.DataFrame({'A': [19, 20, 21], 'B': [22, 23, 24]})
df_reviews = pd.DataFrame({'A': [25, 26, 27], 'B': [28, 29, 30]})
df_orders = pd.DataFrame({'A': [31, 32, 33], 'B': [34, 35, 36]})
df_product_category = pd.DataFrame({'A': [37, 38, 39], 'B': [40, 41, 42]})
df_products = pd.DataFrame({'A': [43, 44, 45], 'B': [46, 47, 48]})
df_sellers = pd.DataFrame({'A': [49, 50, 51], 'B': [52, 53, 54]})


# Gabungkan DataFrame menjadi satu
combined_df = pd.concat([df_customer, df_geolocation, df_orderitems, df_payment, df_reviews, df_orders, df_product_category, df_products, df_sellers], ignore_index=True)

# Cetak hasil gabungan
print(combined_df)

"""## **Exploratory Data Analysis (EDA)**

### Explore ...
"""

df_sellers.head()

# seller terbanyak berdasarkan kota dan negara bagian
df_sellers.groupby(by="seller_city").seller_id.nunique().sort_values(ascending=False)
df_sellers.groupby(by="seller_state").seller_id.nunique().sort_values(ascending=False)

df_orders.head()

## menghitung dan menyimpan waktu pengiriman pesanan dalam satuan hari pada df_orders

delivery_time = df_orders["order_delivered_customer_date"] - df_orders["order_delivered_carrier_date"]
delivery_time = delivery_time.apply(lambda x: x.total_seconds())
df_orders["delivery_time"] = round(delivery_time/86400)

df_orders.sample(5)

# mengecek jumlah status customer active

customer_id_in_df_orders =  df_orders.customer_id.tolist()
df_customer["status"] = df_customer["customer_id"].apply(lambda x: "Active" if x in customer_id_in_df_orders else "Non Active")
df_customer.sample(10)

df_customer.groupby(by="status").customer_id.count()

#1 customer data
df_customer.describe(include="all")

df_customer.sample(5)

##1 demografi berdasarkan kota yang memiliki customer terbanyak -> sao paulo
df_customer.groupby(by="customer_city").customer_id.nunique().sort_values(ascending=False)

##2 demografi berdasarkan negara bagian yang memiliki customer terbanyak -> SP
df_customer.groupby(by="customer_state").customer_id.nunique().sort_values(ascending=False)

#2
df_payment.describe(include="all")

df_payment.head()

## mayoritas pembayaran menggunakan credit card
df_payment.groupby(by="payment_type").order_id.nunique().sort_values(ascending=False)

## Menggabungkan data customers_df dan orders_df

df_orders = pd.merge(
    left=df_customer,
    right=df_orders,
    how="left",
    left_on="customer_id",
    right_on="customer_id"
)
df_orders.head()

# 10 teratas kota dengan customer terbanyak
df_orders.groupby(by="customer_city").order_id.nunique().sort_values(ascending=False).head(10)

# 10 teratas negara bagian dengan customer terbanyak
df_orders.groupby(by="customer_state").order_id.nunique().sort_values(ascending=False).head(10)

## Menggabungkan data order_payments_df dan order_reviews_df

order_payment_df_reviews = pd.merge(
    left=df_payment,
    right=df_reviews,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
order_payment_df_reviews.head()

order_payment_df_reviews.groupby(by="payment_type").order_id.nunique().sort_values(ascending=False).head(10)

# pembayaran terbanyak
order_payment_df_reviews.sort_values(by="payment_value", ascending=False)

order_payment_df_reviews.groupby(by="payment_type").agg({
    "order_id": "nunique",
    "payment_value":  ["min", "max"]
})

## membuat data customer baru

new_customers_df = pd.merge(
    left  = df_orders,
    right = order_payment_df_reviews,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
new_customers_df.head()

## Menggabungkan data orders_item_df dan sellers_df
order_items_df_sellers = pd.merge(
    left=df_orderitems,
    right=df_sellers,
    how="left",
    left_on="seller_id",
    right_on="seller_id"
)
order_items_df_sellers.head()

order_items_df_sellers.groupby(by="seller_city").seller_id.nunique().sort_values(ascending=False).head(10)

order_items_df_sellers.groupby(by="seller_state").seller_id.nunique().sort_values(ascending=False).head(10)

## Membuat data product baru

new_df_products = pd.merge(
    left  = df_product_category,
    right = df_product_category,
    how="left",
    left_on="product_category_name",
    right_on="product_category_name"
)
new_df_products.head()

# stok produk terbanyak
df_products.groupby(by="product_category_name").product_id.nunique().sort_values(ascending=False).head(10)

#Menggabungkan data order_items_seller_df dan new_product_df

new_df_sellers = pd.merge(
    left=df_products,
    right=order_items_df_sellers,
    how="left",
    left_on="product_id",
    right_on="product_id"
)
new_df_sellers.head()

new_df_sellers.sort_values(by="price", ascending=False)

# harga produk tertinggi dan terendah

new_df_sellers.groupby(by="product_category_name").agg({
    "order_id": "nunique",
    "price":  ["min", "max"]
})

"""***Menggabungkan semua data***"""

all_data = pd.merge(
    left=new_customers_df,
    right=new_df_sellers,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
all_data.head()

all_data.info()

all_data.groupby(by="customer_state").agg({
    "order_id": "nunique",
    "payment_value": "sum"
}).sort_values(by="payment_value", ascending=False)

## Membuat data baru yang sebelumnya telah di bersihkan dan di eksplorasi

all_data.to_csv('combine.csv', index=False)



"""## **Visualization & Explanatory Analysis**"""

import pandas as pd
import os

# List semua file CSV yang ingin Anda gabungkan
file_paths = ['customers_dataset.csv', 'geolocation_dataset.csv', 'order_items_dataset.csv', 'order_payments_dataset.csv'
              , 'order_reviews_dataset.csv', 'orders_dataset.csv', 'product_category_name_translation.csv',
              'products_dataset.csv', 'sellers_dataset.csv']

# Inisialisasi list kosong untuk menyimpan DataFrame dari setiap file
dataframes = []

# Loop melalui setiap file dan baca ke dalam DataFrame
for file_path in file_paths:
    df = pd.read_csv(file_path)
    dataframes.append(df)

# Gabungkan DataFrame menjadi satu
combined_df = pd.concat(dataframes)

# Simpan DataFrame gabungan menjadi file CSV
combined_df.to_csv('combined.csv', index=False)

print("Files successfully combined and saved as 'combined.csv'.")

"""### ***Pertanyaan 1:***
**Pesebaran customer ditiap kota dan negara**
"""



import pandas as pd
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('geolocation_dataset.csv')

df_geolocation.head()

ritel_x = df_geolocation.iloc[:, 1:3]
ritel_x.head()

BBox = ((df_geolocation.geolocation_lng.min(),   df_geolocation.geolocation_lng.max(),
         df_geolocation.geolocation_lat.min(), df_geolocation.geolocation_lat.max()))
BBox

brazil = plt.imread("brazil.png")

fig, ax = plt.subplots(figsize = (15,15))
ax.scatter(df_geolocation.geolocation_lng, df_geolocation.geolocation_lat, zorder=1, alpha= 0.9, c='b', s=20)
ax.set_title('Peta Pesebaran Pelanggan Brazil Map')
ax.set_xlim(-101.46676644931476,13.82021409761152)
ax.set_ylim(-34.586422110664884,43.68496096631822)
ax.imshow(brazil, zorder=0, extent = BBox, aspect= 'equal')

"""### Pertanyaan 2:
Banyak customer tiap kota dan negara bagian
"""

order_items_df_sellers.groupby(by="seller_city").seller_id.nunique().sort_values(ascending=False).head(10)

df_orders.head()

sum_df_orders = all_data.groupby("customer_city")["customer_id"].count().reset_index()
sum_df_orders = sum_df_orders.rename(columns={"customer_id": "customers"})
sum_df_orders = sum_df_orders.sort_values(by="customers", ascending=False)
sum_df_orders = sum_df_orders.head(10)

sum_df_orders.head()

sum_df_order = all_data.groupby("customer_state")["customer_id"].count().reset_index()
sum_df_order = sum_df_order.rename(columns={"customer_id": "customers"})
sum_df_order = sum_df_order.sort_values(by="customers", ascending=False)
sum_df_order = sum_df_order.head(10)

sum_df_order.head()

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(30, 8))

colors = ["#007380", "#9ABFAB", "#9ABFAB", "#9ABFAB", "#9ABFAB"]

sns.barplot(x="customers", y="customer_state", data = sum_df_order.head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Jumlah Customer dari tiap Negara", loc="center", fontsize=18)
ax[0].tick_params(axis ='y', labelsize=15)

sns.barplot(x="customers", y="customer_city", data=sum_df_orders.sort_values(by="customers", ascending=True).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Jumlah Customer dari tiap Negara", loc="center", fontsize=18)
ax[1].tick_params(axis='y', labelsize=15)

plt.suptitle("Perbandingan Grafik Pesebaran Customer", fontsize=30)
plt.show()

"""### ***Pertanyaan 3:***
**Tren Bulanan (2018) **
"""

df_orders.head()

order_count_df_monthly = all_data.resample(rule='M', on='order_approved_at').agg({
    "order_id": "nunique",
})
order_count_df_monthly.index = order_count_df_monthly.index.strftime('%B') #mengubah format order_approved_at menjadi Tahun-Bulan
order_count_df_monthly = order_count_df_monthly.reset_index()
order_count_df_monthly.rename(columns={
    "order_id": "order_count",
}, inplace=True)
order_count_df_monthly.head()

order_count_df_monthly = order_count_df_monthly.sort_values('order_count').drop_duplicates('order_approved_at', keep='last')
order_count_df_monthly.head()

order_count_df_monthly = order_count_df_monthly.sort_values('order_count').drop_duplicates('order_approved_at', keep='last')
order_count_df_monthly.head()

order_count_df_monthly.sort_values(by='order_count', ascending=False)

month_code = {
    "January": 1,
    "February": 2,
    "March": 3,
    "April": 4,
    "May": 5,
    "June": 6,
    "July": 7,
    "August": 8,
    "September": 9,
    "October": 10,
    "November": 11,
    "December": 12
}

order_count_df_monthly["month_numeric"] = order_count_df_monthly["order_approved_at"].map(month_code)
order_count_df_monthly = order_count_df_monthly.sort_values("month_numeric")
order_count_df_monthly = order_count_df_monthly.drop("month_numeric", axis=1)

plt.figure(figsize=(10, 5))
plt.plot(
    order_count_df_monthly["order_approved_at"],
    order_count_df_monthly["order_count"],
    marker='o',
    linewidth=2,
    color="#007380"
)
plt.title("Tren Bulanan (2018)", loc="center", fontsize=20)
plt.xticks(fontsize=10, rotation=45)
plt.yticks(fontsize=10)
plt.show()

"""## ***Pertanyaan 4 :***
**Produk terlaris**
"""

sum_df_order_items = all_data.groupby("product_category_name")["product_id"].count().reset_index()
sum_df_order_items = sum_df_order_items.rename(columns={"product_id": "products"})
sum_df_order_items = sum_df_order_items.sort_values(by="products", ascending=False)
sum_df_order_items = sum_df_order_items.head(10)

sum_df_order_items.head()

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(30, 8))

colors = ["#007380", "#9ABFAB", "#9ABFAB", "#9ABFAB", "#9ABFAB"]

sns.barplot(x="products", y="product_category_name", data=sum_df_order_items.head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Produk Paling Laris", loc="center", fontsize=18)
ax[0].tick_params(axis ='y', labelsize=15)

sns.barplot(x="products", y="product_category_name", data=sum_df_order_items.sort_values(by="products", ascending=True).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Produk Kurang Laris", loc="center", fontsize=18)
ax[1].tick_params(axis='y', labelsize=15)

plt.suptitle("Grafik Penjualan Produk", fontsize=30)
plt.show()

"""## ***Pertanyaan 4 :***
**Status Orderan**
"""

total_order_status_df = all_data['order_status'].value_counts(ascending=True)

plt.figure(figsize=(8, 4))
ax = total_order_status_df.plot(kind='bar', color='#007380')
plt.title('Order Status')
plt.xlabel('Status')
plt.ylabel('Number of Orders')

plt.ylim(0, total_order_status_df.max() + 10000)

for i, v in enumerate(total_order_status_df):
    ax.text(i, v, str(v), ha='center', va='bottom', fontsize=10)

plt.show()

"""## ***Pertanyaan 5 :***
Mayoritas Metode Transaksi
"""

df_payment.head()

total_payment_df = all_data['payment_type'].value_counts(ascending=True)

plt.figure(figsize=(13, 5))
ax = total_payment_df.plot(kind='bar', color='#007380')
plt.title('Payment Status')
plt.xlabel('Status')
plt.ylabel('Number of Payment')

plt.ylim(0, total_payment_df.max() + 10000)

for i, v in enumerate(total_payment_df):
    ax.text(i, v, str(v), ha='center', va='bottom', fontsize=10)

plt.show()

"""## ***Pertanyaan 5 :***
*Rating pelayanan E-commerce dari customer*
"""

df_reviews.head()

# @title review_score

from matplotlib import pyplot as plt
review_scores = all_data['review_score'].value_counts().sort_values(ascending=True)
most_common_score = review_scores.idxmax()

sns.set_style("white")

plt.figure(figsize=(10, 5))
ax = sns.barplot(x=review_scores.index,
                 y=review_scores.values,
                 order=review_scores.index,
                 palette=["#007380" if score == most_common_score else "#9ABFAB" for score in review_scores.index]
                )

# df_reviews['review_score'].plot(kind='hist', bins=20, title='review_score')
plt.title("Rating E-commerce dari customer", fontsize=15)
plt.xlabel("Rating")
plt.ylabel("Jumlah Customer")
plt.gca().spines[['top', 'right',]].set_visible(False)



